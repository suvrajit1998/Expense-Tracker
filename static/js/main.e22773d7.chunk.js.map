{"version":3,"sources":["components/header/header.components.jsx","context/app.reducer.js","context/globalstate.jsx","components/balence/balence.component.jsx","components/income-expense/income-expenses.component.jsx","components/transction/transection.componennt.jsx","components/transection-list/transection-list.component.jsx","components/add-transection/add-transection.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","Appreducer","state","action","type","transections","filter","transection","id","payload","initialState","text","amount","GlobalContext","createContext","GlobalProviver","children","useReducer","dispatch","Provider","value","removeTransection","addTransection","Balence","total","useContext","map","reduce","acc","item","toFixed","IcomeExpense","amounts","income","expense","className","Transection","sign","Math","abs","onClick","TransectionList","key","AddTransection","useState","setText","setAount","onSubmit","e","preventDefault","newTransection","uuid","htmlFor","onChange","target","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e22773d7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div>\r\n      <h1>Expenses Tracker</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","export const Appreducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'REMOVE_TRANSECTION':\r\n      return {\r\n        ...state,\r\n        transections: state.transections.filter(\r\n          transection => transection.id !== action.payload\r\n        )\r\n      }\r\n    case 'ADD_TRANSECTION':\r\n      return {\r\n        ...state,\r\n        transections: [action.payload, ...state.transections]\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import React, { createContext, useReducer } from 'react'\r\n\r\nimport { Appreducer } from './app.reducer'\r\n\r\nconst initialState = {\r\n  transections: [\r\n    { id: 1, text: 'Flower', amount: -20 },\r\n    { id: 2, text: 'Salary', amount: 300 },\r\n    { id: 3, text: 'Book', amount: -10 },\r\n    { id: 4, text: 'Camera', amount: 150 }\r\n  ]\r\n}\r\n\r\nexport const GlobalContext = createContext(initialState)\r\n\r\nexport const GlobalProviver = ({ children }) => {\r\n  const [state, dispatch] = useReducer(Appreducer, initialState)\r\n\r\n  const removeTransection = id => {\r\n    dispatch({\r\n      type: 'REMOVE_TRANSECTION',\r\n      payload: id\r\n    })\r\n  }\r\n\r\n  const addTransection = transection => {\r\n    dispatch({\r\n      type: 'ADD_TRANSECTION',\r\n      payload: transection\r\n    })\r\n  }\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        transections: state.transections,\r\n        removeTransection,\r\n        addTransection\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../../context/globalstate'\r\n\r\nexport const Balence = () => {\r\n  const { transections } = useContext(GlobalContext)\r\n\r\n  const amounts = transections.map(transection => transection.amount)\r\n\r\n  const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2)\r\n\r\n  return (\r\n    <>\r\n      <h4>Your Balance</h4>\r\n      <h1 id=\"balance\">{total}</h1>\r\n    </>\r\n  )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../../context/globalstate'\r\n\r\nexport const IcomeExpense = () => {\r\n  const { transections } = useContext(GlobalContext)\r\n\r\n  const amounts = transections.map(transection => transection.amount)\r\n\r\n  const income = amounts\r\n    .filter(item => item > 0)\r\n    .reduce((acc, item) => (acc += item), 0)\r\n    .toFixed(2)\r\n\r\n  const expense = (\r\n    amounts.filter(item => item < 0).reduce((acc, item) => (acc += item), 0) *\r\n    -1\r\n  ).toFixed(2)\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"inc-exp-container\">\r\n        <div>\r\n          <h4>Income</h4>\r\n          <p className=\"money plus\">+${income}</p>\r\n        </div>\r\n        <div>\r\n          <h4>Expense</h4>\r\n          <p className=\"money minus\">-${expense}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../../context/globalstate'\r\n\r\nexport const Transection = ({ transection }) => {\r\n  const { removeTransection } = useContext(GlobalContext)\r\n  const sign = transection.amount < 0 ? '-' : '+'\r\n  return (\r\n    <li className={transection.amount < 0 ? 'minus' : 'plus'}>\r\n      {transection.text}\r\n      <span>\r\n        {sign}${Math.abs(transection.amount)}\r\n      </span>\r\n      <button\r\n        onClick={() => removeTransection(transection.id)}\r\n        className=\"delete-btn\"\r\n      >\r\n        x\r\n      </button>\r\n    </li>\r\n  )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../../context/globalstate'\r\nimport { Transection } from '../transction/transection.componennt'\r\n\r\nexport const TransectionList = () => {\r\n  const { transections } = useContext(GlobalContext)\r\n\r\n  return (\r\n    <div>\r\n      <h3>History</h3>\r\n      <ul className=\"list\">\r\n        {transections.map(transection => (\r\n          <Transection key={transection.id} transection={transection} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useContext } from 'react'\r\nimport uuid from 'uuid'\r\nimport { GlobalContext } from '../../context/globalstate'\r\n\r\nexport const AddTransection = () => {\r\n  const [text, setText] = useState('')\r\n  const [amount, setAount] = useState(0)\r\n\r\n  const { addTransection } = useContext(GlobalContext)\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault()\r\n    const newTransection = {\r\n      id: uuid(),\r\n      text,\r\n      amount: +amount\r\n    }\r\n    addTransection(newTransection)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h3>Add new transaction</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"text\">Text</label>\r\n          <input\r\n            type=\"text\"\r\n            value={text}\r\n            onChange={e => setText(e.target.value)}\r\n            placeholder=\"Enter text...\"\r\n          />\r\n        </div>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"amount\">\r\n            Amount <br />\r\n            (negative - expense, positive - income)\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            value={amount}\r\n            onChange={e => setAount(e.target.value)}\r\n            placeholder=\"Enter amount...\"\r\n          />\r\n        </div>\r\n        <button className=\"btn\">Add transaction</button>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\nimport './App.css'\n\nimport Header from './components/header/header.components'\nimport { Balence } from './components/balence/balence.component'\nimport { IcomeExpense } from './components/income-expense/income-expenses.component'\nimport { TransectionList } from './components/transection-list/transection-list.component'\nimport { AddTransection } from './components/add-transection/add-transection.component'\nimport { GlobalProviver } from './context/globalstate'\n\nconst App = () => {\n  return (\n    <GlobalProviver>\n      <Header />\n      <div className=\"container\">\n        <Balence />\n        <IcomeExpense />\n        <TransectionList />\n        <AddTransection />\n      </div>\n    </GlobalProviver>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}